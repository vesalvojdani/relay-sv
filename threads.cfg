LOCK_FUNCS {

down :void (struct semaphore * )$+/sem/w/f0$
down_interruptible :int (struct semaphore * )$(result==0)?+/sem/w/f0$
down_trylock :int (struct semaphore * )$(result==0)?+/sem/w/f0$
up :void (struct semaphore * )$-/sem/w/f0$
_spin_lock :void (spinlock_t * )$+/lock/w/f0$
_read_lock :void (rwlock_t * )$+/lock/r/f0$
_write_lock :void (rwlock_t * )$+/lock/w/f0$
_spin_lock_bh :void (spinlock_t * )$+/lock/w/f0$
_read_lock_bh :void (rwlock_t * )$+/lock/r/f0$
_write_lock_bh :void (rwlock_t * )$+/lock/w/f0$
_spin_lock_irq :void (spinlock_t * )$+/lock/w/f0$
_read_lock_irq :void (rwlock_t * )$+/lock/r/f0$
_write_lock_irq :void (rwlock_t * )$+/lock/w/f0$
_spin_lock_irqsave :unsigned long (spinlock_t * )$+/lock/w/f0$
_read_lock_irqsave :unsigned long (rwlock_t * )$+/lock/r/f0$
_write_lock_irqsave :unsigned long (rwlock_t * )$+/lock/w/f0$
_spin_trylock :int (spinlock_t * )$(result==0)?+/lock/w/f0$
_read_trylock :int (rwlock_t * )$(result==0)?+/lock/r/f0$
_write_trylock :int (rwlock_t * )$(result==0)?+/lock/w/f0$
_spin_unlock :void (spinlock_t * )$-/lock/w/f0$
_read_unlock :void (rwlock_t * )$-/lock/r/f0$
_write_unlock :void (rwlock_t * )$-/lock/w/f0$
_spin_unlock_bh :void (spinlock_t * )$-/lock/w/f0$
_read_unlock_bh :void (rwlock_t * )$-/lock/r/f0$
_write_unlock_bh :void (rwlock_t * )$-/lock/w/f0$
_spin_unlock_irq :void (spinlock_t * )$-/lock/w/f0$
_read_unlock_irq :void (rwlock_t * )$-/lock/r/f0$
_write_unlock_irq :void (rwlock_t * )$-/lock/w/f0$
_spin_unlock_irqrestore :void (spinlock_t * , unsigned long )$-/lock/w/f0$
_read_unlock_irqrestore :void (spinlock_t * , unsigned long )$-/lock/r/f0$
_write_unlock_irqrestore :void (spinlock_t * , unsigned long )$-/lock/w/f0$
lock_kernel :void (void)$+/kernel_sem/w/g,+/kernel_flag/w/g$
unlock_kernel :void (void)$-/kernel_sem/w/g,-/kernel_flag/w/g$
pthread_mutex_lock :int (pthread_mutex_t * )$+/__mutex/w/f0$
pthread_mutex_unlock :int (pthread_mutex_t * )$-/__mutex/w/f0$
pthread_mutex_trylock :int (pthread_mutex_t * )$(result==EBUSY)?-/__mutex/w/f0$
sem_post :int (sem_t * )$-/sem/w/f0$
sem_wait :int (sem_t * )$+/sem/w/f0$
sem_trywait :int (sem_t * )$(result==0)?+/sem/w/f0$
g_static_rec_mutex_unlock:void (GStaticRecMutex * )$-/mutex/w/f0$
g_static_rec_mutex_lock:void (GStaticRecMutex * )$+/mutex/w/f0$
g_static_rec_mutex_lock_full:void (GStaticRecMutex * , unsigned int )$+/mutex/w/f0$
apr_thread_mutex_lock:apr_status_t (apr_thread_mutex_t * )$+/mutex/w/f0$
apr_thread_mutex_unlock:apr_status_t (apr_thread_mutex_t * )$-/mutex/w/f0$
apr_thread_mutex_trylock:apr_status_t (apr_thread_mutex_t * )$(result==APR_SUCCESS)?+/mutex/w/f0$
apr_proc_mutex_lock:apr_status_t (apr_proc_mutex_t * )$+/mutex/w/f0$
apr_proc_mutex_unlock:apr_status_t (apr_proc_mutex_t * )$-/mutex/w/f0$
apr_proc_mutex_trylock:apr_status_t (apr_proc_mutex_t * )$(result==APR_SUCCESS)?+/mutex/w/f0$
apr_global_mutex_lock:apr_status_t (apr_global_mutex_t * )$+/mutex/w/f0$
apr_global_mutex_unlock:apr_status_t (apr_global_mutex_t * )$-/mutex/w/f0$
apr_global_mutex_trylock:apr_status_t (apr_global_mutex_t * )$(result==APR_SUCCESS)?+/mutex/w/f0$
apr_thread_rwlock_rdlock:apr_status_t (apr_thread_rwlock_t * )$+/mutex/r/f0$
apr_thread_rwlock_wrlock:apr_status_t (apr_thread_rwlock_t * )$+/mutex/w/f0$
apr_thread_rwlock_unlock:apr_status_t (apr_thread_rwlock_t * )$-/mutex/w/f0$
apr_thread_rwlock_tryrdlock:apr_status_t (apr_thread_rwlock_t * )$(result==APR_SUCCESS)?+/mutex/r/f0$
apr_thread_rwlock_trywrlock:apr_status_t (apr_thread_rwlock_t * )$(result==APR_SUCCESS)?+/mutex/w/f0$


}

THREAD_FUNCS {

pthread_create :int (pthread_t * , pthread_attr_t * , void *(*)(void * ) , void * )$true$f2$f3
kthread_create :struct task_struct *(int (*)(void *data ) , void * , char * , ...)$false$wake_up_process$int (struct task_struct * )$f0$f1
kthread_run :struct task_struct *(int (*)(void *data ) , void * , char * , ...)$true$f0$f1
kernel_thread :int (int (*)(void * ) , void * , unsigned long )$true$f0$f1
g_thread_create_full:GThread *(gpointer (*)(gpointer data ) , gpointer , gulong , gboolean , gboolean , GThreadPriority , GError ** )$true$f0$f1
g_thread_pool_new:GThreadPool *(void (*)(gpointer data , gpointer user_data ) , gpointer , gint , gboolean , GError ** )$false$g_thread_pool_push$void (GThreadPool * , gpointer , GError ** )$f0$f1
apr_thread_create:int (struct apr_thread_t ** , apr_threadattr_t * , void *(*)(struct apr_thread_t * , void * ) , void * , apr_pool_t * )$true$f2$f3$f1
ldap_pvt_thread_pool_submit:int (ldap_pvt_thread_pool_t * , ldap_pvt_thread_start_t *, void * )$true$f1$f2$f1
isc_thread_create:isc_result_t (isc_threadresult_t (*)(isc_threadarg_t ) , isc_threadarg_t , isc_thread_t * )$true$f0$f1

}

